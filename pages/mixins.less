// Color and font scheme
{{#with colors}}
@primary:     {{{primary}}};
@secondary:   {{{secondary}}};
@gray-white:  {{{grayWhite}}};
@gray-light:  {{{grayLight}}};
@gray-medium: {{{grayMedium}}};
@gray-dark:   {{{grayDark}}};
@gray-black:  {{{grayBlack}}};
{{/with}}
@font-body: {{fonts.body}}, sans-serif;
@font-display: {{fonts.display}}, serif;

// Breakpoints and common sizes
{{#with breakpoints}}
@bp-s: {{{small}}};
@bp-m: {{{medium}}};
@bp-l: {{{large}}};
{{/with}}
@border: 1px solid;
@border-radius: 1px;
@padding-s: 0.5rem;
@padding-m: 1.5rem;
@padding-l: 3rem;

// Parametric curves
@duration-s: 0.08s;
@duration-m: 0.27s;
@duration-l: 0.5s;
   @in-s: @duration-s ease-in;
  @out-s: @duration-s ease-out;
@inout-s: @duration-s ease-in-out;
   @in-m: @duration-m ease-in;
  @out-m: @duration-m ease-out;
@inout-m: @duration-m ease-in-out;
   @in-l: @duration-l ease-in;
  @out-l: @duration-l ease-out;
@inout-l: @duration-l ease-in-out;


// Breakpoint-focused behaviour
.breakpoint-basic(@bp; @rules) when (@bp = 1) {
	@media (max-width: @bp-s) { @rules(); }
}
.breakpoint-basic(@bp; @rules) when (@bp = 12) {
	@media (max-width: @bp-m) { @rules(); }
}
.breakpoint-basic(@bp; @rules) when (@bp = 123) {
	@media (max-width: @bp-l) { @rules(); }
}
.breakpoint-basic(@bp; @rules) when (@bp = 4) {
	@media (min-width: @bp-l) { @rules(); }
}
.breakpoint-basic(@bp; @rules) when (@bp = 34) {
	@media (min-width: @bp-m) { @rules(); }
}
.breakpoint-basic(@bp; @rules) when (@bp = 234) {
	@media (min-width: @bp-s) { @rules(); }
}
.breakpoint-basic(@bp; @rules) when (@bp = 2) {
	@media (min-width: @bp-s) and (max-width: @bp-m) { @rules(); }
}
.breakpoint-basic(@bp; @rules) when (@bp = 3) {
	@media (min-width: @bp-m) and (max-width: @bp-l) { @rules(); }
}
.breakpoint-basic(@bp; @rules) when (@bp = 23) {
	@media (min-width: @bp-s) and (max-width: @bp-l) { @rules(); }
}

.breakpoint-oriented(@bp; @rules) when (@bp = 1) {
	@media (orientation: portrait) { @rules(); };
	.breakpoint-basic(@bp; @rules);
}
.breakpoint-oriented(@bp; @rules) when not (@bp = 1) {
	@media (orientation: landscape) { .breakpoint-basic(@bp; @rules); }
}

.breakpoint(@bp; @orientation; @rules) when (@orientation) {
	.breakpoint-oriented(@bp; @rules);
}
.breakpoint(@bp; @orientation; @rules) when not (@orientation) {
	.breakpoint-basic(@bp; @rules);
}

// Property-focused behaviour with all the intervals
.responsive(@orientation; @property; @bp1; @bp2; @bp3; @bp4) {
	.breakpoint(1; @orientation; { @{property}: @bp1; });
	.breakpoint(2; @orientation; { @{property}: @bp2; });
	.breakpoint(3; @orientation; { @{property}: @bp3; });
	.breakpoint(4; @orientation; { @{property}: @bp4; });
}

// Property-focused behaviour with only intervals 1 and 234
.responsive-switch(@orientation; @property; @bp1; @bp234) {
	.breakpoint(1;   @orientation; { @{property}: @bp1; });
	.breakpoint(234; @orientation; { @{property}: @bp234; });
}

// Flex column or row
.flex(@dir; @center: false) {
	display: flex;
	flex-wrap: wrap;
}
.flex(@dir; @center: false) when (@dir = col) { flex-flow: column; }
.flex(@dir; @center: false) when (@dir = row) { flex-flow: row; }
.flex(@dir; @center: false) when (@center) {
	align-items:     center;
	justify-content: center;
}
.flex(@dir; @center: false) when not (@center) {
	align-items:     flex-start;
	justify-content: flex-start;
}

// Mimics padding along the main flex direction
.flex-air(@size) when (@size > 0) {
	&:before,
	&:after {
		content: "\00a0";
		flex: 0 0 @size;
		overflow: hidden;
	}
}

// Padded flex row container
.padded-flex-row(@padding-main; @padding-cross: @padding-main) {
	.flex(row);
	.flex-air(@padding-main);
	padding: @padding-cross 0;
}

// Padded flex col container
.padded-flex-col(@padding-main; @padding-cross: @padding-main) {
	.flex(col);
	.flex-air(@padding-main);
	padding: 0 @padding-cross;
}

// Padded flex container acting as a row in interval 234 and col otherwise
.responsive-flex-row(@padding-main: 0, @padding-cross: @padding-main) {
	.breakpoint(1;   true; { .padded-flex-col(@padding-main; @padding-cross); });
	.breakpoint(234; true; { .padded-flex-row(@padding-main; @padding-cross); });
}

// Padded flex container acting as a col in interval 234 and row otherwise
.responsive-flex-col(@padding-main: 0, @padding-cross: @padding-main) {
	.breakpoint(1;   true; { .padded-flex-row(@padding-main; @padding-cross); });
	.breakpoint(234; true; { .padded-flex-col(@padding-main; @padding-cross); });
}

// Child of a responsive flex row
.responsive-flex-row-child() {
	flex: 1 1 0;
	.breakpoint(1;   true; { width:  100%; });
	.breakpoint(234; true; { height: 100%; });
}

// Child of a responsive flex col
.responsive-flex-col-child() {
	flex: 1 1 0;
	.breakpoint(1;   true; { height: 100%; });
	.breakpoint(234; true; { width:  100%; });
}

// Relative full block
.full() {
	display: block;
	height: 100%;
	left: 0;
	position: relative;
	top: 0;
	width: 100%;
}
