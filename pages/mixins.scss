// Color and font scheme
{{#with colors}}
$primary:     {{{primary}}};
$secondary:   {{{secondary}}};
$gray-white:  {{{grayWhite}}};
$gray-light:  {{{grayLight}}};
$gray-medium: {{{grayMedium}}};
$gray-dark:   {{{grayDark}}};
$gray-black:  {{{grayBlack}}};
{{/with}}
$font-body: {{fonts.body}}, sans-serif;
$font-display: {{fonts.display}}, serif;

// Breakpoints and common sizes
{{#with breakpoints}}
$bp-s: {{{small}}};
$bp-m: {{{medium}}};
$bp-l: {{{large}}};
{{/with}}
$border-radius: 1px;
$border-width:  1px;
$box-shadow-s:  3px  4px  3px fade_out($gray-black, 0.96);
$box-shadow-m: 10px 12px  9px fade_out($gray-black, 0.97);
$box-shadow-l: 20px 24px 27px fade_out($gray-black, 0.98);
$padding-s: 0.5rem;
$padding-m: 1.5rem;
$padding-l: 3rem;

// Parametric curves
$duration-s: 0.08s;
$duration-m: 0.27s;
$duration-l: 0.5s;
   $in-s: $duration-s ease-in;
  $out-s: $duration-s ease-out;
$inout-s: $duration-s ease-in-out;
   $in-m: $duration-m ease-in;
  $out-m: $duration-m ease-out;
$inout-m: $duration-m ease-in-out;
   $in-l: $duration-l ease-in;
  $out-l: $duration-l ease-out;
$inout-l: $duration-l ease-in-out;

@mixin breakpoint($bp) {
	     @if $bp == 1   { @media (max-width:  $bp-s) { @content; }}
	@else if $bp == 12  { @media (max-width:  $bp-m) { @content; }}
	@else if $bp == 123 { @media (max-width:  $bp-l) { @content; }}
	@else if $bp == 4   { @media (min-width:  $bp-l) { @content; }}
	@else if $bp == 34  { @media (min-width:  $bp-m) { @content; }}
	@else if $bp == 234 { @media (min-width:  $bp-s) { @content; }}
	@else if $bp == 2   { @media (min-width:  $bp-s)
	                         and (max-width:  $bp-m) { @content; }}
	@else if $bp == 3   { @media (min-width:  $bp-m)
	                         and (max-width:  $bp-l) { @content; }}
	@else if $bp == 23  { @media (min-width:  $bp-s)
	                         and (max-width:  $bp-l) { @content; }}
}

// Property-focused behaviour with all the intervals
@mixin responsive($property, $values) {
	@media (max-width:  $bp-s) { #{$property}: nth($values, 1); }
	@media (min-width:  $bp-s)
	   and (max-width:  $bp-m) { #{$property}: nth($values, 2); }
	@media (min-width:  $bp-m)
	   and (max-width:  $bp-l) { #{$property}: nth($values, 3); }
	@media (min-width:  $bp-l) { #{$property}: nth($values, 4); }
}

// Property-focused behaviour with only intervals 1 and 234
@mixin responsive-switch($property, $values) {
	@media (max-width:  $bp-s) { #{$property}: nth($values, 1); }
	@media (min-width:  $bp-s) { #{$property}: nth($values, 2); }
}

// Flex column or row
@mixin flex($dir, $center: false) {
	display: flex;
	flex-wrap: wrap;

	@if $dir == col { flex-flow: column; }
	@else {@if $dir == row { flex-flow: row; }}
	
	@if $center {
		align-items:     center;
		justify-content: center;
	} @else {
		align-items:     flex-start;
		justify-content: flex-start;
	}
}

// Mimics padding along the main flex direction
@mixin flex-air($size) {
	@if $size > 0 {
		&:before,
		&:after {
			content: "\00a0";
			flex: 0 0 $size;
			overflow: hidden;
		}
	}
}

// Padded flex row container
@mixin padded-flex-row($padding-main, $padding-cross: 0) {
	@include flex(row);
	@include flex-air($padding-main);
	padding: $padding-cross 0;
}

// Padded flex col container
@mixin padded-flex-col($padding-main, $padding-cross: $padding-main) {
	@include flex(col);
	@include flex-air($padding-main);
	padding: 0 $padding-cross;
}

// Padded flex container acting as a row in interval 234 and col otherwise
@mixin responsive-flex-row($padding-main: 0, $padding-cross: $padding-main) {
	@include breakpoint(1) {
		@include padded-flex-col($padding-main, $padding-cross);
	}
	@include breakpoint(234) {
		@include padded-flex-row($padding-main, $padding-cross);
	}
}

// Padded flex container acting as a col in interval 234 and row otherwise
@mixin responsive-flex-col($padding-main: 0, $padding-cross: $padding-main) {
	@include breakpoint(1) {
		@include padded-flex-row($padding-main, $padding-cross);
	}
	@include breakpoint(234) {
		@include padded-flex-col($padding-main, $padding-cross);
	}
}

// Child of a responsive flex row
@mixin responsive-flex-row-child() {
	flex: 1 1 0;
	@include breakpoint(1) { width: 100%; }
	@include breakpoint(234) { height: 100%; }
}

// Child of a responsive flex col
@mixin responsive-flex-col-child() {
	flex: 1 1 0;
	@include breakpoint(1) { height: 100%; }
	@include breakpoint(234) { width: 100%; }
}

// relative full block
@mixin full() {
	display: block;
	height: 100%;
	left: 0;
	position: relative;
	top: 0;
	width: 100%;
}
